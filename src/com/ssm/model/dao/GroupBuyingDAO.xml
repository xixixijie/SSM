<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.model.dao.GroupBuyingDAO">



    <!--根据条件查询团购活动-->
    <select id="searchActivities"  parameterType="Activity" resultType="Activity">
    	select * from group_buying_activity g JOIN product p on g.productID = p.product_id
    	<where>
            <if test="product.product_name!=null and product.product_name!= ''">
                and product_Name like '%'||#{product.product_name}||'%'
            </if>
            <if test="activityStatus!=null and activityStatus!= 0">
                and activityStatus=#{activityStatus}
            </if>
            <if test="groupStartDate!=null">
                and groupStartDate &gt;= #{groupStartDate}
            </if>
            <if test="groupEndDate!=null">
                and groupEndDate &lt;= #{groupEndDate}
            </if>
        </where>
    </select>


    <!--根据活动ID查询参与此活动的团队的集合-->
    <select id="searchGroups" parameterType="java.lang.Integer" resultType="Group" flushCache="true">
        select * from group_buying_list
        where activityID = #{activityID}
    </select>

    <!--&lt;!&ndash;批量删除活动&ndash;&gt;-->
    <!--&lt;!&ndash;批量修改活动的状态为3&ndash;&gt;-->
    <!--<update id="deleteActivities" >-->
        <!--UPDATE group_buying_activity set activityStatus = 3-->
        <!--WHERE activityID in-->
        <!--<foreach collection="array" item="item" open="(" separator="," close=")">-->
            <!--#{item}-->
        <!--</foreach>-->
    <!--</update>-->

    <!--&lt;!&ndash;检查是否可以删除，如果已经开始就不能删除，DAO层做的工作就是返回其开始时间&ndash;&gt;-->
    <!--<select id="checkIfCanDelete" parameterType="Activity" resultType="Date">-->
        <!--select groupStartDate from group_buying_activity where activityID = #{activityID}-->
    <!--</select>-->

    <!--&lt;!&ndash;检查是否已经达到要求参与的人数,DAO层做的主要工作就是返回当前人数&ndash;&gt;-->
    <!--<select id="checkIfEnough" parameterType="java.lang.Integer" resultType="java.lang.Integer">-->
        <!--SELECT currentNumber from group_buying_list-->
        <!--where groupID = #{groupID}-->
    <!--</select>-->

    <!--发布团购活动-->
    <insert id="releaseActivity" parameterType="Activity">
        <selectKey keyProperty="activityID" resultType="int" order="BEFORE">
            select nvl(max(activityID),0)+1 from group_buying_activity
        </selectKey>
        insert into group_buying_activity
        VALUES (#{activityID},#{product.product_id},#{group_buying_price},#{requiredNumber},#{groupStartDate},#{groupEndDate},#{activityStatus})
    </insert>


    <!--开团操作-->
    <insert id="initiateGroupBuying" parameterType="Group">
        <selectKey keyProperty="groupID" resultType="int">
            select nvl(max(groupID),0)+1 from group_buying_list
        </selectKey>
        insert into group_buying_list
        VALUES  (#{groupID},#{leader.userID},#{product.productID},#{activity.activityID},1,1);
    </insert>

    <!--开团附属操作，记录-->


    <!--&lt;!&ndash;跟团操作&ndash;&gt;-->
    <!--<insert id="joinGroupBuying" parameterType="map">-->
        <!--UPDATE group_buying_list set currentNumber=(-->
        <!--SELECT currentNumber+1 from group_buying_list-->
        <!--where groupID = #{}-->
        <!--);-->
        <!--<selectKey keyProperty="groupID" resultType="int">-->
            <!--select nvl(max(groupID),0)+1 from group_buying_list-->
        <!--</selectKey>-->
        <!--insert into group_buying_list-->
        <!--VALUES  (#{groupID},#{leader.userID},#{product.productID},#{activity.activityID},1,1)-->
    <!--</insert>-->


</mapper>









